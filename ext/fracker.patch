diff --git a/config.m4 b/config.m4
--- a/config.m4
+++ b/config.m4
@@ -13,6 +13,11 @@ m4_include([m4/pkg.m4])
 m4_include([m4/clocks.m4])
 
 if test "$PHP_XDEBUG" != "no"; then
+  dnl Fracker dependencies
+  PKG_CHECK_MODULES(JSON_C, json-c)
+  PHP_EVAL_INCLINE($JSON_C_CFLAGS)
+  PHP_EVAL_LIBLINE($JSON_C_LIBS, XDEBUG_SHARED_LIBADD)
+
   AC_MSG_CHECKING([for supported PHP version])
   PHP_XDEBUG_FOUND_VERSION=`${PHP_CONFIG} --version`
   PHP_XDEBUG_FOUND_VERNUM=`${PHP_CONFIG} --vernum`
@@ -114,7 +119,7 @@ if test "$PHP_XDEBUG" != "no"; then
   XDEBUG_DEVELOP_SOURCES="src/develop/develop.c src/develop/monitor.c src/develop/php_functions.c src/develop/stack.c src/develop/superglobals.c"
   XDEBUG_GCSTATS_SOURCES="src/gcstats/gc_stats.c"
   XDEBUG_PROFILER_SOURCES="src/profiler/profiler.c"
-  XDEBUG_TRACING_SOURCES="src/tracing/trace_computerized.c src/tracing/trace_flamegraph.c src/tracing/trace_html.c src/tracing/trace_textual.c src/tracing/tracing.c"
+  XDEBUG_TRACING_SOURCES="src/tracing/trace_computerized.c src/tracing/trace_flamegraph.c src/tracing/trace_html.c src/tracing/trace_textual.c src/tracing/trace_fracker.c src/tracing/tracing.c"
 
   PHP_NEW_EXTENSION(xdebug, xdebug.c $XDEBUG_BASE_SOURCES $XDEBUG_LIB_SOURCES $XDEBUG_COVERAGE_SOURCES $XDEBUG_DEBUGGER_SOURCES $XDEBUG_DEVELOP_SOURCES $XDEBUG_GCSTATS_SOURCES $XDEBUG_PROFILER_SOURCES $XDEBUG_TRACING_SOURCES, $ext_shared,,$PHP_XDEBUG_CFLAGS,,yes)
   PHP_ADD_BUILD_DIR(PHP_EXT_BUILDDIR(xdebug)[/src/base])
diff --git a/src/tracing/trace_fracker.c b/src/tracing/trace_fracker.c
new file mode 100644
--- /dev/null
+++ b/src/tracing/trace_fracker.c
@@ -0,0 +1,319 @@
+/* Copyright (c) 2023 Andrea Cardaci <cyrus.and@gmail.com> */
+
+#include "php.h"
+#include "ext/standard/php_string.h"
+
+#include "php_xdebug.h"
+#include "tracing_private.h"
+#include "trace_fracker.h"
+
+#include "lib/var_export_line.h"
+
+#include "ext/json/php_json.h"
+#include "zend_smart_str.h"
+
+#include <arpa/inet.h>
+#include <netdb.h>
+#include <netinet/in.h>
+#include <netinet/tcp.h>
+#include <sys/socket.h>
+#include <sys/types.h>
+#include <sys/uio.h>
+
+#include <json.h>
+
+#define LOG_PREFIX "[!] Fracker: "
+
+#define CTXT(x) (((xdebug_trace_fracker_context*) ctxt)->x)
+
+extern ZEND_DECLARE_MODULE_GLOBALS(xdebug);
+
+static int connect_to_server()
+{
+    struct addrinfo *addresses, *ptr, hints = {0};
+    int errorcode, socket_fd = -1;
+
+    /* resolve the given address */
+    hints.ai_socktype = SOCK_STREAM;
+    hints.ai_flags = AI_NUMERICSERV;
+    errorcode = getaddrinfo(XINI_TRACE(trace_fracker_host), XINI_TRACE(trace_fracker_port), &hints, &addresses);
+    if (errorcode) {
+        return -1;
+    }
+
+    /* try all the available addresses */
+    for (ptr = addresses; ptr; ptr = ptr->ai_next) {
+        /* allocate a socket file descriptor */
+        socket_fd = socket(ptr->ai_family, ptr->ai_socktype, 0);
+        if (socket_fd == -1) {
+            return -1;
+        }
+
+        /* connect to the server */
+        if (connect(socket_fd, ptr->ai_addr, ptr->ai_addrlen)) {
+            close(socket_fd);
+            continue;
+        }
+
+        /* connection successful */
+        break;
+    }
+
+    /* cleanup address resolution data */
+    freeaddrinfo(addresses);
+
+    /* connection not performed */
+    if (!ptr) {
+        close(socket_fd);
+        return -1;
+    }
+
+    return socket_fd;
+}
+
+static void write_json_object(int fd, struct json_object *object)
+{
+    struct iovec to_write[2];
+
+    /* TODO properly check the writev syscall (XXX warning is suppressed) */
+
+    /* write the object followed by a newline then cleanup */
+    to_write[0].iov_base = (char *)json_object_to_json_string(object);
+    to_write[0].iov_len = strlen(to_write[0].iov_base);
+    to_write[1].iov_base = (char *)"\n";
+    to_write[1].iov_len = 1;
+    (void)!writev(fd, to_write, 2);
+    json_object_put(object);
+}
+
+static int zval_to_json(zval *value, struct json_object **object)
+{
+    smart_str buf = {0};
+
+    /* XXX zval -> JSON using PHP api, then parse it back */
+
+    /* XXX JSON_G(error_code) may cause undefined symbol at runtime so we rely
+       on the fact that the string is not NULL */
+
+    php_json_encode(&buf, value, PHP_JSON_PARTIAL_OUTPUT_ON_ERROR);
+    if (buf.s) {
+        smart_str_0(&buf);
+        *object = json_tokener_parse(ZSTR_VAL(buf.s));
+        smart_str_free(&buf);
+        return 1;
+    } else {
+        /* fall back to null */
+        *object = NULL;
+        return 0;
+    }
+}
+
+static void add_json_zval(void *ctxt, struct json_object *parent, const char *key, zval *value)
+{
+    struct json_object *object = NULL;
+
+    /* convert the zvalue and notify the server on errors (a null object is used) */
+    if (!zval_to_json(value, &object)) {
+        struct json_object *info;
+        xdebug_str *tmp_value, message = XDEBUG_STR_INITIALIZER;
+
+        /* prepare message */
+        xdebug_str_add(&message, "Invalid JSON conversion for ", 0);
+        tmp_value = xdebug_get_zval_value_line(value, 0, NULL);
+        xdebug_str_add_str(&message, tmp_value);
+
+        /* send warning info */
+        info = json_object_new_object();
+        json_object_object_add(info, "type", json_object_new_string("warning"));
+        json_object_object_add(info, "message", json_object_new_string(message.d));
+        write_json_object(CTXT(socket_fd), info);
+        fprintf(stderr, LOG_PREFIX "%s\n", message.d);
+
+        /* cleanup */
+        xdebug_str_free(tmp_value);
+        xdebug_str_destroy(&message);
+    }
+
+    /* update the json object */
+    json_object_object_add(parent, key, object);
+}
+
+static void add_json_typed_zval(void *ctxt, struct json_object *parent, zval *value)
+{
+    xdebug_str *type;
+
+    /* add type */
+    add_json_zval(ctxt, parent, "value", value);
+
+    /* add value */
+    type = xdebug_get_zval_synopsis_line(value, 0, NULL);
+    json_object_object_add(parent, "type", json_object_new_string(type->d));
+    xdebug_str_free(type);
+}
+
+static struct json_object *get_php_input()
+{
+    php_stream *php_input;
+    json_object *input = NULL;
+    zend_string *data = NULL;
+
+    /* open the PHP inpuit stream (POST data or stdin) and read its value */
+    php_input = php_stream_open_wrapper("php://input", "r", 0, NULL);
+    data = php_stream_copy_to_mem(php_input, PHP_STREAM_COPY_ALL, 0);
+    if (data) {
+        input = json_object_new_string_len(ZSTR_VAL(data), ZSTR_LEN(data));
+        zend_string_free(data);
+    }
+
+    php_stream_close(php_input);
+    return input;
+}
+
+void *xdebug_trace_fracker_init(char *fname, zend_string *script_filename, long options)
+{
+    xdebug_trace_fracker_context *ctxt;
+    int socket_fd;
+
+    /* establish a connection to the server */
+    socket_fd = connect_to_server();
+    if (socket_fd == -1) {
+        fprintf(stderr, LOG_PREFIX "Cannot connect to %s:%s\n",
+                XINI_TRACE(trace_fracker_host), XINI_TRACE(trace_fracker_port));
+        return NULL;
+    }
+
+    /* allocate and populate the context */
+    ctxt = xdmalloc(sizeof(xdebug_trace_fracker_context));
+    CTXT(socket_fd) = socket_fd;
+    return ctxt;
+}
+
+void xdebug_trace_fracker_deinit(void *ctxt)
+{
+    /* release resources */
+    close(CTXT(socket_fd));
+    xdfree(ctxt);
+}
+
+void xdebug_trace_fracker_write_header(void *ctxt)
+{
+    struct json_object *info;
+
+    /* send request info */
+    info = json_object_new_object();
+    json_object_object_add(info, "type", json_object_new_string("request"));
+    add_json_zval(ctxt, info, "server", &PG(http_globals)[TRACK_VARS_SERVER]);
+    add_json_zval(ctxt, info, "get", &PG(http_globals)[TRACK_VARS_GET]);
+    add_json_zval(ctxt, info, "post", &PG(http_globals)[TRACK_VARS_POST]);
+    add_json_zval(ctxt, info, "cookie", &PG(http_globals)[TRACK_VARS_COOKIE]);
+    json_object_object_add(info, "input", get_php_input());
+    write_json_object(CTXT(socket_fd), info);
+}
+
+void xdebug_trace_fracker_write_footer(void *ctxt) {}
+
+char *xdebug_trace_fracker_get_filename(void *ctxt)
+{
+    return (char *)"{TCP}";
+}
+
+void xdebug_trace_fracker_function_entry(void *ctxt, function_stack_entry *fse)
+{
+    struct json_object *info, *arguments, *argument;
+    char *function;
+
+    /* fill call info */
+    function = xdebug_show_fname(fse->function, 0);
+    info = json_object_new_object();
+    json_object_object_add(info, "type", json_object_new_string("call"));
+    json_object_object_add(info, "id", json_object_new_int(fse->function_nr));
+    json_object_object_add(info, "level", json_object_new_int(fse->level));
+    json_object_object_add(info, "timestamp", json_object_new_double(xdebug_get_nanotime()));
+    json_object_object_add(info, "function", json_object_new_string(function));
+    json_object_object_add(info, "file", json_object_new_string(ZSTR_VAL(fse->filename)));
+    json_object_object_add(info, "line", json_object_new_int(fse->lineno));
+    xdfree(function);
+
+    /* process arguments */
+    arguments = json_object_new_array();
+    if (fse->function.include_filename) {
+        /* XXX require and include are handled differently (unfortunately this
+           is not the actual variable value but a computed one) */
+
+        /* fill and add argument info */
+        argument = json_object_new_object();
+        json_object_object_add(argument, "value", json_object_new_string(ZSTR_VAL(fse->function.include_filename)));
+        json_object_array_add(arguments, argument);
+    } else {
+        int i;
+
+        for (i = 0; i < fse->varc; i++) {
+            const zend_string *name;
+
+            /* fill and add argument info */
+            name = fse->var[i].name;
+            argument = json_object_new_object();
+            if (name) {
+                json_object_object_add(argument, "name", json_object_new_string(ZSTR_VAL(name)));
+            }
+            add_json_typed_zval(ctxt, argument, &fse->var[i].data);
+            json_object_array_add(arguments, argument);
+        }
+    }
+    json_object_object_add(info, "arguments", arguments);
+
+    /* serialize and send */
+    write_json_object(CTXT(socket_fd), info);
+}
+
+void xdebug_trace_fracker_function_exit(void *ctxt, function_stack_entry *fse)
+{
+    struct json_object *info;
+
+    /* fill call info */
+    info = json_object_new_object();
+    json_object_object_add(info, "type", json_object_new_string("exit"));
+    json_object_object_add(info, "id", json_object_new_int(fse->function_nr));
+    json_object_object_add(info, "level", json_object_new_int(fse->level));
+    json_object_object_add(info, "timestamp", json_object_new_double(xdebug_get_nanotime()));
+
+    /* serialize and send */
+    write_json_object(CTXT(socket_fd), info);
+}
+
+void xdebug_trace_fracker_function_return_value(void *ctxt, function_stack_entry *fse, zval *return_value)
+{
+    struct json_object *info, *return_;
+
+    /* fill call info */
+    info = json_object_new_object();
+    json_object_object_add(info, "type", json_object_new_string("return"));
+    json_object_object_add(info, "id", json_object_new_int(fse->function_nr));
+    json_object_object_add(info, "level", json_object_new_int(fse->level));
+
+    /* process return value */
+    return_ = json_object_new_object();
+    add_json_typed_zval(ctxt, return_, return_value);
+    json_object_object_add(info, "return", return_);
+
+    /* serialize and send */
+    write_json_object(CTXT(socket_fd), info);
+}
+
+void xdebug_trace_fracker_generator_return_value(void *ctxt, function_stack_entry *fse, zend_generator *generator) {}
+
+void xdebug_trace_fracker_assignment(void *ctxt, function_stack_entry *fse, char *full_varname, zval *value, char *right_full_varname, const char *op, char *file, int lineno) {}
+
+xdebug_trace_handler_t xdebug_trace_handler_fracker =
+{
+    xdebug_trace_fracker_init,
+    xdebug_trace_fracker_deinit,
+    xdebug_trace_fracker_write_header,
+    xdebug_trace_fracker_write_footer,
+    xdebug_trace_fracker_get_filename,
+    xdebug_trace_fracker_function_entry,
+    xdebug_trace_fracker_function_exit,
+    xdebug_trace_fracker_function_return_value,
+    xdebug_trace_fracker_generator_return_value,
+    xdebug_trace_fracker_assignment
+};
diff --git a/src/tracing/trace_fracker.h b/src/tracing/trace_fracker.h
new file mode 100644
--- /dev/null
+++ b/src/tracing/trace_fracker.h
@@ -0,0 +1,14 @@
+/* Copyright (c) 2023 Andrea Cardaci <cyrus.and@gmail.com> */
+
+#ifndef XDEBUG_TRACE_FRACKER_H
+#define XDEBUG_TRACE_FRACKER_H
+
+#include "tracing.h"
+
+typedef struct _xdebug_trace_fracker_context
+{
+    int socket_fd;
+} xdebug_trace_fracker_context;
+
+extern xdebug_trace_handler_t xdebug_trace_handler_fracker;
+#endif
diff --git a/src/tracing/tracing.c b/src/tracing/tracing.c
--- a/src/tracing/tracing.c
+++ b/src/tracing/tracing.c
@@ -22,6 +22,7 @@
 #include "trace_flamegraph.h"
 #include "trace_computerized.h"
 #include "trace_html.h"
+#include "trace_fracker.h"
 
 #include "lib/compat.h"
 #include "lib/log.h"
@@ -40,6 +41,7 @@ static xdebug_trace_handler_t *xdebug_select_trace_handler(int options)
 		case 2: tmp = &xdebug_trace_handler_html; break;
 		case 3: tmp = &xdebug_trace_handler_flamegraph_cost; break;
 		case 4: tmp = &xdebug_trace_handler_flamegraph_mem; break;
+		case 5: tmp = &xdebug_trace_handler_fracker; break;
 		default:
 			php_error(E_NOTICE, "A wrong value for xdebug.trace_format was selected (%d), defaulting to the textual format", (int) XINI_TRACE(trace_format));
 			tmp = &xdebug_trace_handler_textual; break;
diff --git a/src/tracing/tracing.h b/src/tracing/tracing.h
--- a/src/tracing/tracing.h
+++ b/src/tracing/tracing.h
@@ -50,6 +50,10 @@ typedef struct _xdebug_tracing_settings_t {
 	zend_bool     collect_assignments;
 	zend_bool     collect_params;
 	zend_bool     collect_return;
+
+	/* Fracker settings */
+	char         *trace_fracker_host;
+	char         *trace_fracker_port;
 } xdebug_tracing_settings_t;
 
 void xdebug_init_tracing_globals(xdebug_tracing_globals_t *xg);
diff --git a/xdebug.c b/xdebug.c
--- a/xdebug.c
+++ b/xdebug.c
@@ -300,13 +300,17 @@ ZEND_INI_DISP(display_start_upon_error)
 #endif
 
 PHP_INI_BEGIN()
+	/* Fracker settings */
+	STD_PHP_INI_ENTRY("xdebug.trace_fracker_host", "127.0.0.1", PHP_INI_ALL, OnUpdateString, settings.tracing.trace_fracker_host, zend_xdebug_globals, xdebug_globals)
+	STD_PHP_INI_ENTRY("xdebug.trace_fracker_port", "6666",      PHP_INI_ALL, OnUpdateString, settings.tracing.trace_fracker_port, zend_xdebug_globals, xdebug_globals)
+
 	/* Library settings */
-	STD_PHP_INI_ENTRY("xdebug.mode",               "develop",               PHP_INI_SYSTEM,                OnUpdateString, settings.library.requested_mode,   zend_xdebug_globals, xdebug_globals)
-	PHP_INI_ENTRY_EX( "xdebug.start_with_request", "default",               PHP_INI_SYSTEM|PHP_INI_PERDIR, OnUpdateStartWithRequest, display_start_with_request)
+	STD_PHP_INI_ENTRY("xdebug.mode",               "trace",                 PHP_INI_SYSTEM,                OnUpdateString, settings.library.requested_mode,   zend_xdebug_globals, xdebug_globals)
+	PHP_INI_ENTRY_EX( "xdebug.start_with_request", "yes",                   PHP_INI_SYSTEM|PHP_INI_PERDIR, OnUpdateStartWithRequest, display_start_with_request)
 	PHP_INI_ENTRY_EX( "xdebug.start_upon_error",   "default",               PHP_INI_SYSTEM|PHP_INI_PERDIR, OnUpdateStartUponError,   display_start_upon_error)
 	STD_PHP_INI_ENTRY("xdebug.output_dir",         XDEBUG_TEMP_DIR,         PHP_INI_ALL,                   OnUpdateString, settings.library.output_dir,       zend_xdebug_globals, xdebug_globals)
 	STD_PHP_INI_ENTRY("xdebug.use_compression",    USE_COMPRESSION_DEFAULT, PHP_INI_ALL,                   OnUpdateBool,   settings.library.use_compression,  zend_xdebug_globals, xdebug_globals)
-	STD_PHP_INI_ENTRY("xdebug.trigger_value",      "",                      PHP_INI_SYSTEM|PHP_INI_PERDIR, OnUpdateString, settings.library.trigger_value,    zend_xdebug_globals, xdebug_globals)
+	STD_PHP_INI_ENTRY("xdebug.trigger_value",      "FRACKER",               PHP_INI_SYSTEM|PHP_INI_PERDIR, OnUpdateString, settings.library.trigger_value,    zend_xdebug_globals, xdebug_globals)
 	STD_PHP_INI_ENTRY("xdebug.file_link_format",   "",                      PHP_INI_ALL,                   OnUpdateString, settings.library.file_link_format, zend_xdebug_globals, xdebug_globals)
 	STD_PHP_INI_ENTRY("xdebug.filename_format",    "",                      PHP_INI_ALL,                   OnUpdateString, settings.library.filename_format,  zend_xdebug_globals, xdebug_globals)
 #if __linux__
@@ -370,11 +374,11 @@ PHP_INI_BEGIN()
 
 	/* Tracing settings */
 	STD_PHP_INI_ENTRY("xdebug.trace_output_name", "trace.%c",           PHP_INI_ALL,    OnUpdateString, settings.tracing.trace_output_name, zend_xdebug_globals, xdebug_globals)
-	STD_PHP_INI_ENTRY("xdebug.trace_format",      "0",                  PHP_INI_ALL,    OnUpdateLong,   settings.tracing.trace_format,      zend_xdebug_globals, xdebug_globals)
+	STD_PHP_INI_ENTRY("xdebug.trace_format",      "5",                  PHP_INI_ALL,    OnUpdateLong,   settings.tracing.trace_format,      zend_xdebug_globals, xdebug_globals)
 	STD_PHP_INI_ENTRY("xdebug.trace_options",     "0",                  PHP_INI_ALL,    OnUpdateLong,   settings.tracing.trace_options,     zend_xdebug_globals, xdebug_globals)
 	STD_PHP_INI_BOOLEAN("xdebug.collect_assignments", "0",              PHP_INI_ALL,    OnUpdateBool,   settings.tracing.collect_assignments, zend_xdebug_globals, xdebug_globals)
 	STD_PHP_INI_BOOLEAN("xdebug.collect_params", "1",                   PHP_INI_ALL,    OnUpdateBool,   settings.tracing.collect_params,    zend_xdebug_globals, xdebug_globals)
-	STD_PHP_INI_BOOLEAN("xdebug.collect_return",  "0",                  PHP_INI_ALL,    OnUpdateBool,   settings.tracing.collect_return,    zend_xdebug_globals, xdebug_globals)
+	STD_PHP_INI_BOOLEAN("xdebug.collect_return",  "1",                  PHP_INI_ALL,    OnUpdateBool,   settings.tracing.collect_return,    zend_xdebug_globals, xdebug_globals)
 
 	/* Removed/Changed settings */
 	XDEBUG_CHANGED_INI_ENTRY(xdebug.auto_trace)
